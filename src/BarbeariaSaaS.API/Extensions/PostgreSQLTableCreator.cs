using BarbeariaSaaS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;

namespace BarbeariaSaaS.API.Extensions;

public static class PostgreSQLTableCreator
{
    public static async Task CreateTablesAsync(ApplicationDbContext context, ILogger logger)
    {
        try
        {
            logger.LogInformation("Creating PostgreSQL tables manually...");
            
            var sql = @"
                -- Create Tenants table
                CREATE TABLE IF NOT EXISTS ""Tenants"" (
                    ""Id"" UUID PRIMARY KEY,
                    ""Name"" VARCHAR(200) NOT NULL,
                    ""Subdomain"" VARCHAR(100) NOT NULL UNIQUE,
                    ""Description"" VARCHAR(500),
                    ""Phone"" VARCHAR(20),
                    ""Email"" VARCHAR(200),
                    ""Address"" VARCHAR(500),
                    ""Status"" INTEGER NOT NULL,
                    ""Plan"" INTEGER NOT NULL,
                    ""CreatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    ""UpdatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    ""BrandingJson"" TEXT,
                    ""SettingsJson"" TEXT
                );

                -- Create Users table
                CREATE TABLE IF NOT EXISTS ""Users"" (
                    ""Id"" UUID PRIMARY KEY,
                    ""Name"" VARCHAR(200) NOT NULL,
                    ""Email"" VARCHAR(200) NOT NULL UNIQUE,
                    ""PasswordHash"" VARCHAR(500) NOT NULL,
                    ""Phone"" VARCHAR(20),
                    ""Role"" INTEGER NOT NULL,
                    ""TenantId"" UUID NOT NULL,
                    ""IsActive"" BOOLEAN NOT NULL DEFAULT TRUE,
                    ""LastLoginAt"" TIMESTAMP WITH TIME ZONE,
                    ""CreatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    FOREIGN KEY (""TenantId"") REFERENCES ""Tenants""(""Id"") ON DELETE RESTRICT
                );

                -- Add LastLoginAt column to existing Users table if it doesn't exist
                DO $$ 
                BEGIN 
                    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                                   WHERE table_name = 'Users' AND column_name = 'LastLoginAt') THEN
                        ALTER TABLE ""Users"" ADD COLUMN ""LastLoginAt"" TIMESTAMP WITH TIME ZONE;
                    END IF;
                END $$;

                -- Create ServiceCategories table
                CREATE TABLE IF NOT EXISTS ""ServiceCategories"" (
                    ""Id"" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    ""TenantId"" UUID NOT NULL,
                    ""Name"" VARCHAR(100) NOT NULL,
                    ""Description"" VARCHAR(300),
                    ""Color"" VARCHAR(7),
                    ""IsActive"" BOOLEAN NOT NULL DEFAULT TRUE,
                    FOREIGN KEY (""TenantId"") REFERENCES ""Tenants""(""Id"") ON DELETE RESTRICT
                );

                -- Create Services table
                CREATE TABLE IF NOT EXISTS ""Services"" (
                    ""Id"" UUID PRIMARY KEY,
                    ""TenantId"" UUID NOT NULL,
                    ""Name"" VARCHAR(200) NOT NULL,
                    ""Description"" VARCHAR(500),
                    ""Price"" DECIMAL(10,2) NOT NULL,
                    ""DurationMinutes"" INTEGER NOT NULL,
                    ""Color"" VARCHAR(7),
                    ""ImageUrl"" VARCHAR(500),
                    ""CategoryId"" INTEGER,
                    ""IsActive"" BOOLEAN NOT NULL DEFAULT TRUE,
                    ""CreatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    FOREIGN KEY (""TenantId"") REFERENCES ""Tenants""(""Id"") ON DELETE RESTRICT,
                    FOREIGN KEY (""CategoryId"") REFERENCES ""ServiceCategories""(""Id"") ON DELETE SET NULL
                );

                -- Create Customers table
                CREATE TABLE IF NOT EXISTS ""Customers"" (
                    ""Id"" UUID PRIMARY KEY,
                    ""TenantId"" UUID NOT NULL,
                    ""Name"" VARCHAR(200) NOT NULL,
                    ""Email"" VARCHAR(200) NOT NULL,
                    ""Phone"" VARCHAR(20) NOT NULL,
                    ""CreatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    FOREIGN KEY (""TenantId"") REFERENCES ""Tenants""(""Id"") ON DELETE RESTRICT
                );

                -- Create Bookings table
                CREATE TABLE IF NOT EXISTS ""Bookings"" (
                    ""Id"" UUID PRIMARY KEY,
                    ""TenantId"" UUID NOT NULL,
                    ""ServiceId"" UUID NOT NULL,
                    ""CustomerId"" UUID,
                    ""CustomerName"" VARCHAR(200) NOT NULL,
                    ""CustomerEmail"" VARCHAR(200) NOT NULL,
                    ""CustomerPhone"" VARCHAR(20) NOT NULL,
                    ""BookingDate"" DATE NOT NULL,
                    ""BookingTime"" TIME NOT NULL,
                    ""Status"" INTEGER NOT NULL,
                    ""Notes"" VARCHAR(1000),
                    ""ServicePrice"" DECIMAL(10,2) NOT NULL,
                    ""CreatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    ""UpdatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    FOREIGN KEY (""TenantId"") REFERENCES ""Tenants""(""Id"") ON DELETE RESTRICT,
                    FOREIGN KEY (""ServiceId"") REFERENCES ""Services""(""Id"") ON DELETE RESTRICT,
                    FOREIGN KEY (""CustomerId"") REFERENCES ""Customers""(""Id"") ON DELETE SET NULL
                );

                -- Create BusinessHours table
                CREATE TABLE IF NOT EXISTS ""BusinessHours"" (
                    ""Id"" UUID PRIMARY KEY,
                    ""TenantId"" UUID NOT NULL,
                    ""DayOfWeek"" INTEGER NOT NULL,
                    ""IsOpen"" BOOLEAN NOT NULL DEFAULT TRUE,
                    ""OpenTime"" TIME NOT NULL,
                    ""CloseTime"" TIME NOT NULL,
                    FOREIGN KEY (""TenantId"") REFERENCES ""Tenants""(""Id"") ON DELETE RESTRICT
                );

                -- Create Files table
                CREATE TABLE IF NOT EXISTS ""Files"" (
                    ""Id"" UUID PRIMARY KEY,
                    ""TenantId"" UUID NOT NULL,
                    ""FileName"" VARCHAR(255) NOT NULL,
                    ""FilePath"" VARCHAR(500) NOT NULL,
                    ""FileSize"" BIGINT NOT NULL,
                    ""ContentType"" VARCHAR(100) NOT NULL,
                    ""Category"" VARCHAR(50) NOT NULL,
                    ""UploadedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
                    FOREIGN KEY (""TenantId"") REFERENCES ""Tenants""(""Id"") ON DELETE RESTRICT
                );

                -- Create indexes
                CREATE INDEX IF NOT EXISTS ""IX_Users_TenantId"" ON ""Users""(""TenantId"");
                CREATE INDEX IF NOT EXISTS ""IX_Services_TenantId"" ON ""Services""(""TenantId"");
                CREATE INDEX IF NOT EXISTS ""IX_Services_TenantId_IsActive"" ON ""Services""(""TenantId"", ""IsActive"");
                CREATE INDEX IF NOT EXISTS ""IX_Bookings_TenantId"" ON ""Bookings""(""TenantId"");
                CREATE INDEX IF NOT EXISTS ""IX_Bookings_TenantId_BookingDate"" ON ""Bookings""(""TenantId"", ""BookingDate"");
                CREATE INDEX IF NOT EXISTS ""IX_Bookings_TenantId_Status"" ON ""Bookings""(""TenantId"", ""Status"");
                CREATE INDEX IF NOT EXISTS ""IX_Customers_TenantId"" ON ""Customers""(""TenantId"");
                CREATE INDEX IF NOT EXISTS ""IX_Customers_TenantId_Email"" ON ""Customers""(""TenantId"", ""Email"");
            ";

            await context.Database.ExecuteSqlRawAsync(sql);
            logger.LogInformation("✅ PostgreSQL tables created successfully");
        }
        catch (Exception ex)
        {
            logger.LogError("❌ Failed to create PostgreSQL tables: {Error}", ex.Message);
            throw;
        }
    }
} 